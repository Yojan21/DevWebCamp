{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","hora_previa","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","add","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","hora","addEventListener","seleccionarHora","obtenerHorasDisponibles","json","buscarEventos","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","seleccionarPonente","ponente","ponentePrevio","ponenteId","respuesta","arrayPonentes","nombre","trim","apellido","id","formatearPonentes","obtenerPonentes","length","expresion","RegExp","toLowerCase","search","firstChild","removeChild","ponenteHTML","createElement","textContent","onclick","appendChild","noResultado","mostrarPonentes","tagsInput","tagsDiv","tagsinputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){\n    let horas = document.querySelector('#horas');\n    if(horas){\n        let busqueda ={\n            categoria_id: '',\n            dia: ''\n        }\n        \n        let categoria = document.querySelector('[name=\"categoria_id\"]');\n        let dias = document.querySelectorAll('[name=\"dia\"]');\n        let inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\n        let inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\n        categoria.addEventListener('change', terminoBusqueda);\n        dias.forEach(dia => dia.addEventListener('change', terminoBusqueda));\n\n        function terminoBusqueda(e){\n            busqueda[e.target.name] = e.target.value;\n            \n            //Reiniciar los campos ocultos y el selector de horas\n            inputHiddenHora.value = '';\n            inputHiddenDia.value = '';\n            const hora_previa = document.querySelector('.horas_hora-seleccionada')\n            if(hora_previa){\n                hora_previa.classList.remove('horas_hora-seleccionada');\n            }\n\n            if(Object.values(busqueda).includes('')){\n                return;\n            }\n            buscarEventos();\n        }\n\n        async function buscarEventos(){\n            const {dia, categoria_id } = busqueda\n            const url = `http://localhost:3000/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;      \n            const resultado = await fetch(url);        \n            const eventos = await resultado.json();\n            obtenerHorasDisponibles(eventos);\n        }\n\n        function obtenerHorasDisponibles(eventos){\n\n            //Reiniciar las horas\n            const listadoHoras = document.querySelectorAll('#horas li');\n            listadoHoras.forEach(li => li.classList.add('horas_hora-deshabilitada'))\n\n            //Comprobar Eventos ya tomados y quitar la variable de desabilitado\n            const horasTomadas = eventos.map(evento => evento.hora_id);\n            const listadoHorasArray = Array.from(listadoHoras);\n            const resultado = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId));\n\n            resultado.forEach(li => li.classList.remove('horas_hora-deshabilitada'));\n\n            \n            const horasDisponible = document.querySelectorAll('#horas li:not(.horas_hora-deshabilitada');\n            horasDisponible.forEach( hora => hora.addEventListener('click', seleccionarHora))\n        }\n\n        function seleccionarHora(e){\n            //Desabilitar la hora previa si hay un nuevo click\n            const hora_previa = document.querySelector('.horas_hora-seleccionada')\n            if(hora_previa){\n                hora_previa.classList.remove('horas_hora-seleccionada');\n            }\n            //Agregar clase para visualizacion\n            e.target.classList.add('horas_hora-seleccionada');\n            inputHiddenHora.value = e.target.dataset.horaId;\n\n            //Llenar el campo oculto de dia\n            inputHiddenDia.value = document.querySelector('[name = \"dia\"]:checked').value;\n        }\n\n    }\n})();","(function(){\n    const ponentesInput = document.querySelector('#ponentes');\n\n    if(ponentesInput){\n        let ponentes = [];\n        let ponentesFiltrados = [];\n        const listadoPonentes = document.querySelector('#listado-ponentes');\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\n        \n        obtenerPonentes();\n        ponentesInput.addEventListener('input' , buscarPonentes);\n\n        async function obtenerPonentes(){\n            const url = `/api/ponentes`;      \n            const respuesta = await fetch(url);        \n            const resultado = await respuesta.json();\n            \n            formatearPonentes(resultado);\n        }\n\n        function formatearPonentes(arrayPonentes = []){\n            ponentes = arrayPonentes.map(ponente => {\n                return {\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\n                    id: ponente.id\n                }\n            })\n            \n        }\n\n        function buscarPonentes(e){\n            const busqueda = e.target.value;\n            if(busqueda.length >= 3){\n                const expresion = new RegExp(busqueda, \"i\"); //Para buscar en mayuscula o miniscula\n                ponentesFiltrados = ponentes.filter(ponente => {\n                    if(ponente.nombre.toLowerCase().search(expresion) != -1){\n                        return ponente\n                    }\n                })\n            }else{\n                ponentesFiltrados = [];\n            }\n            \n            mostrarPonentes();\n        }\n        \n        function mostrarPonentes(){\n            while(listadoPonentes.firstChild){\n                listadoPonentes.removeChild(listadoPonentes.firstChild);\n            }\n\n            if(ponentesFiltrados.length > 0){\n                ponentesFiltrados.forEach(ponente => {\n                    const ponenteHTML = document.createElement('LI');\n                    ponenteHTML.classList.add('listado-ponentes_ponente');\n                    ponenteHTML.textContent = ponente.nombre;\n                    ponenteHTML.dataset.ponenteId = ponente.id;\n                    ponenteHTML.onclick = seleccionarPonente;\n    \n                    //Agregar al DOM\n                    listadoPonentes.appendChild(ponenteHTML)\n                })\n            }else{\n                const noResultado = document.createElement('P');\n                noResultado.classList.add('listado-ponentes_no-resultado');\n                noResultado.textContent = 'No hay resultados para tu busqueda';\n                listadoPonentes.appendChild(noResultado);\n            }\n            \n        }\n\n        function seleccionarPonente(e){\n            const ponente = e.target;\n            //remover la clase previa\n            const ponentePrevio = document.querySelector('.listado-ponentes_ponente-seleccionado');\n\n            if(ponentePrevio){\n                ponentePrevio.classList.remove('listado-ponentes_ponente-seleccionado')\n            }\n            ponente.classList.add('listado-ponentes_ponente-seleccionado');\n            ponenteHidden.value = ponente.dataset.ponenteId;\n            \n        }\n    }\n})();","(function(){\n    const tagsInput = document.querySelector('#tags_input');\n\n    if(tagsInput){\n        const tagsDiv = document.querySelector('#tags');\n        const tagsinputHidden = document.querySelector('[name=\"tags\"]');\n        let tags = [];\n\n        //Recuperar del input oculto\n        if(tagsinputHidden.value !== ''){\n            tags = tagsinputHidden.value.split(',');\n            mostrarTags();\n        }\n\n        //Escuchar los cambios en el input\n        tagsInput.addEventListener('keypress', guardarTag);\n\n        function guardarTag(e){\n            if(e.keyCode === 44){\n                if(e.target.value.trim() === '' || e.target.value < 1){\n                    return;\n                }\n                e.preventDefault();\n                tags = [...tags, e.target.value.trim()];\n                tagsInput.value = '';\n\n                mostrarTags();\n            }\n        }\n\n        function mostrarTags(){\n            tagsDiv.textContent = '';\n\n            tags.forEach(tag => {\n                const etiqueta = document.createElement('LI');\n                etiqueta.classList.add('formulario_tag');\n                etiqueta.textContent = tag;\n                etiqueta.ondblclick = eliminarTag;\n                tagsDiv.appendChild(etiqueta);\n            });\n            actualizarInputHidden();\n        }\n\n        function eliminarTag(e){\n            e.target.remove();\n            tags = tags.filter(tag => tag !== e.target.textContent);\n            actualizarInputHidden();\n        }\n\n        function actualizarInputHidden(){\n            tagsinputHidden.value = tags.toString();\n        }\n    }\n})() //IIFE"]}